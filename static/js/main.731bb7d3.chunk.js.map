{"version":3,"sources":["SortingVisualizer/Functions/SortingAlgs.js","SortingVisualizer/Visualizer/Visualizer.jsx","SortingVisualizer/Functions/Misc.js","SortingVisualizer/Menus/ImageSelectMenu.jsx","SortingVisualizer/Menus/SelectMenu.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getQuickSortAnimations","list","lo","hi","swaps","p","quickSortPartition","pivotIdx","Math","floor","i","j","tmp","push","getMergeSortAnimations","comps","changes","left","right","currChanges","currComps","newList","length","Visualizer","props","state","barHeights","timeoutIDs","this","randomize","numBars","clearAnimations","Array","fill","setState","indices","map","item","idx","array","tmpVal","randIdx","currIdx","random","Misc","maxHeight","window","innerHeight","delay","bars","document","getElementsByClassName","min","max","setTimeout","style","height","clearTimeout","background","getElementById","width","result","len","newLen","Algs","slice","b1","b2","origList","b3","step","padding","value","className","marginLeft","marginRight","Component","ImageSelectMenu","selected","defaultIdx","open","isOpen","trigger","id","label","onClick","toggleOpen","type","src","optionImages","alt","options","suffix","xmlns","viewBox","aria-hidden","fillRule","d","clipRule","tabIndex","role","handleListClick","SelectMenu","SortingVisualizer","algOptions","algOptionImages","delayOptions","sizeOptions","algMenuRef","React","createRef","sizeMenuRef","delayMenuRef","visRef","e","target","closest","current","alg","animateBubbleSort","animateQuickSort","animateMergeSort","closeMenusIfApplicable","ref","randomizeVisualizer","aria-haspopup","aria-expanded","aria-labelledby","simulateSort","paddingBottom","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.731bb7d3.chunk.js","sourcesContent":["/*\r\n  Takes in an original (most likely unsorted) list and uses a bubble sort approach\r\n  to sort it, keeping track of the swaps performed throughout the process.\r\n\r\n  Returns the new list as element 0 and the swaps as element 1.\r\n*/\r\nexport const getBubbleSortAnimations = (list) => {\r\n  let len = list.length;\r\n  let swaps = [];\r\n\r\n  while(len > 1) {\r\n    let newLen = 0;\r\n    for (let i = 1; i < len; i++) {\r\n      if (list[i-1] > list[i]) {\r\n        newLen = i;\r\n        //swap values\r\n        const tmp = list[i-1];\r\n        list[i-1] = list[i];\r\n        list[i] = tmp;\r\n        //add values to swaps array\r\n        swaps.push([i-1, i]);\r\n      }\r\n    }\r\n    len = newLen;\r\n  }\r\n  return [list, swaps];\r\n};\r\n\r\n/*\r\n  Takes in a (most likely unsorted) list and uses a quick sort approach\r\n  to sort the portion from [lo, hi), keeping track of the swaps performed throughout\r\n  the process.\r\n\r\n  Returns the new list as element 0 and the swaps as element 1.\r\n*/\r\nexport const getQuickSortAnimations = (list, lo, hi, swaps=[]) => {\r\n  // If there is a list to sort (lo < hi), get partition and sort between those.\r\n  if (lo < hi) {\r\n    const p = quickSortPartition(list, lo, hi, swaps);\r\n    getQuickSortAnimations(list, lo, p, swaps);\r\n    getQuickSortAnimations(list, p+1, hi, swaps);\r\n  }\r\n  return [list, swaps];\r\n};\r\n\r\n/*\r\n  Takes in a (most likely unsorted) list and adds element swaps until a partition\r\n  is found. Elements added to swap are of the form [swap1, swap2, pivot].\r\n\r\n  Returns the partition found.\r\n*/\r\nconst quickSortPartition = (list, lo, hi, swaps) => {\r\n  // Calculates pivot index to swap elements around, use floor to avoid infinite recursion\r\n  let pivotIdx = Math.floor((hi+lo)/2);\r\n  let i = lo-1;\r\n  let j = hi+1;\r\n\r\n  // Until a partition is found, find next pair of values to be swapped and do so\r\n  while (true) {\r\n    i++\r\n    while (list[i] < list[pivotIdx]) {\r\n      i++;\r\n    }\r\n    j--;\r\n    while (list[j] > list[pivotIdx]) {\r\n      j--;\r\n    }\r\n    if (i >= j) { // If this is satisfied, new partition has been found so return it\r\n      return j;\r\n    }\r\n\r\n    // Swap values\r\n    const tmp = list[i];\r\n    list[i] = list[j];\r\n    list[j] = tmp;\r\n    if (i === pivotIdx) {\r\n      pivotIdx = j;\r\n    }\r\n    else if (j === pivotIdx) {\r\n      pivotIdx = i;\r\n    }\r\n\r\n    // Add swapped indices as well as pivot index to the list\r\n    swaps.push([i, j, pivotIdx]);\r\n  }\r\n};\r\n\r\n/*\r\n  Takes in a (most likely unsorted) list and uses a merge sort approach\r\n  to sort the portion from [lo, hi), keeping track of the swaps performed throughout\r\n  the process.\r\n\r\n  Returns the new list as element 0, comps as element 1, and changes as element 2.\r\n*/\r\nexport const getMergeSortAnimations = (list, lo, hi, comps=[], changes=[]) => {\r\n  // If the list is size 1, return the array as it is already sorted\r\n  if (hi - lo <= 1) {\r\n    return [[list[lo]]];\r\n  }\r\n\r\n  // Split the list into halves and recursively merge them\r\n  const p = Math.floor((hi-lo)/2);\r\n  const left = getMergeSortAnimations(list, lo, lo+p, comps, changes)[0];\r\n  const right = getMergeSortAnimations(list, lo+p, hi, comps, changes)[0];\r\n  \r\n  // Once the subsections are sorted, merge the two halves by direct comparison\r\n  let currChanges = []; // Changes are of the form [index, height]\r\n  let currComps = [];\r\n  let newList = [];\r\n\r\n  let i = 0;\r\n  let j = 0;\r\n  while (i < left.length && j < right.length) {\r\n    // Add the current indices being compared\r\n    currComps.push(lo+i);\r\n    currComps.push(lo+p+j);\r\n\r\n    // Add the lower of the two values and queue that change\r\n    if (left[i] < right[j]) {\r\n      newList.push(left[i]);\r\n      currChanges.push([lo+i+j, left[i]]);\r\n      i++;\r\n    }\r\n    else {\r\n      newList.push(right[j]);\r\n      currChanges.push([lo+i+j, right[j]]);\r\n      j++;\r\n    }\r\n  }\r\n\r\n  // Do the above process with the remaning values (should lists be diff lengths)\r\n  while (i < left.length) {\r\n    newList.push(left[i]);\r\n    currComps.push(lo+i);\r\n    currChanges.push([lo+i+j, left[i]]);\r\n    i++;\r\n  }\r\n  while (j < right.length) {\r\n    newList.push(right[j]);\r\n    currComps.push(lo+p+j);\r\n    currChanges.push([lo+i+j, right[j]]);\r\n    j++;\r\n  }\r\n\r\n  // Add all current comparisons and changes to the list and return them\r\n  comps.push(currComps);\r\n  changes.push(currChanges);\r\n  return [newList, comps, changes];\r\n};","import React, {Component} from \"react\";\r\nimport * as Misc from \"../Functions/Misc\"\r\nimport * as Algs from \"../Functions/SortingAlgs\"\r\n\r\n/* \r\n  The secondary Component on the bottom portion of the page. Stores the heights of bars\r\n  used to visualize each algorithm in the state (as it is needed for rendering), as well\r\n  as the IDs for any queued animations (in case they need to be stopped should a sim or\r\n  randomization be stopped early).\r\n*/\r\nexport default class Visualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      barHeights: [],\r\n    }\r\n    this.timeoutIDs = [];\r\n  }\r\n  \r\n  /*\r\n    Automatically randomizes the bars when this component first appears on the page.\r\n  */\r\n  componentDidMount() {\r\n    this.randomize(this.props.numBars);\r\n  }\r\n\r\n  /*\r\n    Randomizes the bars to some height between 1 and the maximum height of this Component\r\n    (with some vertical padding taken into account).\r\n  */\r\n  randomize(numBars) {\r\n    // *Very Important!* Stops all queued animations before re-randomizing everything\r\n    this.clearAnimations();\r\n\r\n    let list = Array(numBars).fill(0);\r\n    this.setState({barHeights: list});\r\n\r\n    // Shuffle the indices up (creates the \"random\" effect of which bars are chosen)\r\n    let indices = [];\r\n    list.map((item, idx) => indices.push(idx));\r\n    Misc.shuffle(indices);\r\n    \r\n    const maxHeight = (window.innerHeight * 5/6) * 0.8 // 0.8 is for 10% y-padding\r\n    const delay = 1000 / numBars; // Takes 1s total regardless of chosen delay\r\n    const bars = document.getElementsByClassName(\"visBar\");\r\n\r\n    // For each index, set height of that bar to a random number from [1, maxHeight]\r\n    indices.map((item, idx) => {\r\n      list[item] = Misc.randomInt(5, maxHeight);\r\n      this.timeoutIDs.push(setTimeout(() => {\r\n        bars[item].style.height = `${list[item]}px`;\r\n      }, idx * delay));\r\n    });\r\n    \r\n    // Update barHeights array to reflect the new random values\r\n    this.timeoutIDs.push(setTimeout(() => {\r\n      this.setState({barHeights: list});\r\n    }, numBars * delay));\r\n  }\r\n  \r\n  /*\r\n    Called each time the visualizer randomizes or simulates in order to prevent\r\n    previously-queued animations from interfering with the new ones.\r\n  */\r\n  clearAnimations() {\r\n    // Clear all queued changes\r\n    this.timeoutIDs.map((item) => clearTimeout(item));\r\n    this.timeoutIDs = [];\r\n\r\n    // Set all bars back to default color and revert progress bar back to zero\r\n    const bars = document.getElementsByClassName(\"visBar\");\r\n    for (let i = 0; i < this.state.barHeights.length; i++) {\r\n      bars[i].style.height = `${this.state.barHeights[i]}px`;\r\n      bars[i].style.background = \"linear-gradient(#bfdbfe, #60a5fa)\";\r\n    }\r\n    document.getElementById(\"progressBar\").style.width = \"0px\";\r\n  }\r\n\r\n  /*\r\n    Performs a bubble sort on the barHeights list. Takes the resulting swaps\r\n    and queues the relevant animations repersenting each swap to the bars.\r\n  */\r\n  animateBubbleSort(delay) {\r\n    this.clearAnimations();\r\n    \r\n    const bars = document.getElementsByClassName(\"visBar\");\r\n    const origList = this.state.barHeights.slice();\r\n\r\n    // Returns the new list as element 0 and the list of swaps as element 1\r\n    const result = Algs.getBubbleSortAnimations(origList);\r\n    const newList = result[0];\r\n    const swaps = result[1];\r\n\r\n    // For each swap, set the relevant bars to a red color, then swap them,\r\n    // then return them to the original color.\r\n    for (let i = 0; i < swaps.length; i++) {\r\n      const b1 = swaps[i][0];\r\n      const b2 = swaps[i][1];\r\n\r\n      // Make both bars red\r\n      this.timeoutIDs.push(setTimeout(() => {\r\n        bars[b1].style.background = \"linear-gradient(#fecaca, #f87171)\";\r\n        bars[b2].style.background = \"linear-gradient(#fecaca, #f87171)\";\r\n      }, i * delay));\r\n\r\n      // Swap bar heights and update progress bar\r\n      this.timeoutIDs.push(setTimeout(() => {\r\n        const tmp = bars[b1].style.height;\r\n        bars[b1].style.height = bars[b2].style.height;\r\n        bars[b2].style.height = tmp;\r\n        document.getElementById(\"progressBar\").style.width = `${11.5*(i+1)/swaps.length}rem`;\r\n      }, (i+0.5) * delay));\r\n\r\n      // Make both bars blue again\r\n      this.timeoutIDs.push(setTimeout(() => {\r\n        bars[b1].style.background = \"linear-gradient(#bfdbfe, #60a5fa)\";\r\n        bars[b2].style.background = \"linear-gradient(#bfdbfe, #60a5fa)\";\r\n      }, (i+1) * delay));\r\n    }\r\n\r\n    // Update barHeights array to reflect sorted values, reset progress bar\r\n    this.timeoutIDs.push(setTimeout(() => {\r\n      document.getElementById(\"progressBar\").style.width = \"0rem\";\r\n      this.setState({barHeights: newList});\r\n    }, swaps.length * delay));\r\n  }\r\n\r\n  /*\r\n    Performs a quick sort on the barHeights list. Takes the resulting swaps\r\n    and queues the relevant animations repersenting each swap to the bars.\r\n  */\r\n  animateQuickSort(delay) {\r\n    this.clearAnimations();\r\n\r\n    const bars = document.getElementsByClassName(\"visBar\");\r\n    const origList = this.state.barHeights.slice();\r\n\r\n    // Returns the new list as element 0 and the list of swaps as element 1\r\n    const result = Algs.getQuickSortAnimations(origList, 0, origList.length-1);\r\n    const newList = result[0];\r\n    const swaps = result[1];\r\n\r\n    // For each swap, set the swapped bars to red and pivot bar to green,\r\n    // swap them, then return them to the original color.\r\n    for (let i = 0; i < swaps.length; i++) {\r\n      const b1 = swaps[i][0];\r\n      const b2 = swaps[i][1];\r\n      const b3 = swaps[i][2];\r\n\r\n      // Perform color changes (b1,b2 to red, b3 to green)\r\n      this.timeoutIDs.push(setTimeout(() => {\r\n        bars[b1].style.background = \"linear-gradient(#fecaca, #f87171)\";\r\n        bars[b2].style.background = \"linear-gradient(#fecaca, #f87171)\";\r\n        bars[b3].style.background = \"linear-gradient(#a7f3d0, #34d399)\";\r\n      }, i * delay));\r\n\r\n      // Swap bar heights and update progress bar\r\n      this.timeoutIDs.push(setTimeout(() => {\r\n        const tmp = bars[b1].style.height;\r\n        bars[b1].style.height = bars[b2].style.height;\r\n        bars[b2].style.height = tmp;\r\n        document.getElementById(\"progressBar\").style.width = `${11.5*i/swaps.length}rem`;\r\n      }, (i+0.5) * delay));\r\n\r\n      // Make all bars blue again\r\n      this.timeoutIDs.push(setTimeout(() => {\r\n        bars[b1].style.background = \"linear-gradient(#bfdbfe, #60a5fa)\";\r\n        bars[b2].style.background = \"linear-gradient(#bfdbfe, #60a5fa)\";\r\n        bars[b3].style.background = \"linear-gradient(#bfdbfe, #60a5fa)\";\r\n      }, (i+1) * delay));\r\n    }\r\n\r\n    // Update barHeights array to reflect sorted values, reset progress bar\r\n    this.timeoutIDs.push(setTimeout(() => {\r\n      document.getElementById(\"progressBar\").style.width = \"0rem\";\r\n      this.setState({barHeights: newList});\r\n    }, swaps.length * delay));\r\n  }\r\n\r\n  /*\r\n    Performs a merge sort on the barHeights list. Takes the resulting comparisons,\r\n    then changes and queues the relevant animations repersenting each swap to the bars.\r\n  */\r\n  animateMergeSort(delay) {\r\n    this.clearAnimations();\r\n\r\n    const bars = document.getElementsByClassName(\"visBar\");\r\n    const origList = this.state.barHeights.slice();\r\n\r\n    // Returns new list as element 0, comparisons as element 1, changes as element 2\r\n    const result = Algs.getMergeSortAnimations(origList, 0, origList.length);\r\n    const newList = result[0];\r\n    const comps = result[1];\r\n    const changes = result[2];\r\n\r\n    // For each comparison, set the two bars as red. After comparisons are over,\r\n    // animate the formation of the \"changed\" partition by making the newly placed\r\n    // bars green. Use a step counter to keep track of each delay easily\r\n    let step = 0;\r\n    for (let i = 0; i < comps.length; i++) {\r\n      const currComps = comps[i];\r\n      const currChanges = changes[i];\r\n\r\n      // Change compared bars to a red color\r\n      for (let j = 0; j < currComps.length; j++) {\r\n        this.timeoutIDs.push(setTimeout(() => {\r\n          bars[currComps[j]].style.background = \"linear-gradient(#fecaca, #f87171)\";\r\n   \r\n          // After one delay \"tick\" change these same bars back to blue\r\n          setTimeout(() => {\r\n            bars[currComps[j]].style.background = \"linear-gradient(#bfdbfe, #60a5fa)\";\r\n          }, delay);\r\n        }, step * delay));\r\n        step++;\r\n      }\r\n\r\n      // Animate formation of changed partition by changing heights and color to green\r\n      for (let j = 0; j < currChanges.length; j++) {\r\n        this.timeoutIDs.push(setTimeout(() => {\r\n          bars[currChanges[j][0]].style.background = \"linear-gradient(#a7f3d0, #34d399)\";\r\n          bars[currChanges[j][0]].style.height = `${currChanges[j][1]}px`;\r\n        }, step * delay));\r\n        step++;\r\n      }\r\n\r\n      // Update progress bar after each partition is complete\r\n      this.timeoutIDs.push(setTimeout(() => {\r\n        //change all currChanges bars back to blue\r\n        for (let j = 0; j < currChanges.length; j++) {\r\n          bars[currChanges[j][0]].style.background = \"linear-gradient(#bfdbfe, #60a5fa)\";\r\n        }\r\n        document.getElementById(\"progressBar\").style.width = `${11.5*(i+1)/comps.length}rem`;\r\n      }, step * delay));\r\n    }\r\n\r\n    // Update barHeights array to reflect sorted values, reset progress bar\r\n    this.timeoutIDs.push(setTimeout(() => {\r\n      document.getElementById(\"progressBar\").style.width = \"0rem\";\r\n      this.setState({barHeights: newList});\r\n    }, (step+1) * delay));\r\n  }\r\n\r\n  /*\r\n    Runs each time the props or state of this component changes (typically after a\r\n    set of animations has just finished). Simply takes the barHeights array and sets\r\n    each bar to the corresponding index's value.\r\n  */\r\n  render() {\r\n    const numBars = this.state.barHeights.length;\r\n\r\n    let width;\r\n    let padding;\r\n\r\n    if (numBars === 10) {\r\n      width = 100;\r\n      padding = 10;\r\n    }\r\n    else if (numBars === 50) {\r\n      width = 25;\r\n      padding = 5;\r\n    }\r\n    else if (numBars === 100) {\r\n      width = 15;\r\n      padding = 3;\r\n    }\r\n    else if (numBars === 500) {\r\n      width = 2;\r\n      padding = 1.75;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {this.state.barHeights.map((value, idx) => (\r\n          <div className=\"visBar bg-gradient-to-t from-blue-400 to-blue-200 select-none shadow-md rounded-sm\"\r\n            key={idx}\r\n            style={{height: `${value}px`, width: `${width}px`, marginLeft: `${padding/2}px`, marginRight: `${padding/2}px`}}/>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}","/*\r\n  Takes in an array and shuffles the values up, used in Visualizer.randomize()\r\n*/\r\nexport const shuffle = (array) => {\r\n  let currIdx = array.length;\r\n  let tmpVal;\r\n  let randIdx;\r\n\r\n  // While there are elements left to shuffle, pick one and swap with current index\r\n  while (currIdx > 0) {\r\n    // Pick a remaining index\r\n    randIdx = Math.floor(Math.random() * currIdx);\r\n    currIdx -= 1;\r\n\r\n    // Swap with current index\r\n    tmpVal = array[currIdx];\r\n    array[currIdx] = array[randIdx];\r\n    array[randIdx] = tmpVal;\r\n  }\r\n};\r\n\r\n/*\r\n  Generates a random integer within [min, max]\r\n*/\r\nexport const randomInt = (min, max) => Math.floor(Math.random() * (max-min+1) + min);","import React, {Component} from \"react\";\r\n\r\n/* \r\n  A generic class used for selecting between multiple options with a dropdown menu that\r\n  has an image for each option. Responsible for keeping track of the selected option as\r\n  well as the state of whether the dropdown portion is open or closed.\r\n*/\r\nexport default class ImageSelectMenu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: props.defaultIdx,\r\n      open: false\r\n    };\r\n  }\r\n\r\n  /*\r\n    Called each time the main button of the menu is clicked, toggles the open/closed state.\r\n  */\r\n  toggleOpen() {\r\n    this.setState((state) => {\r\n      return {isOpen: !state.isOpen};\r\n    });\r\n  }\r\n\r\n  /*\r\n    Called each time one of the options in the dropdown menu portion is selected, toggles\r\n    the open/closed state and updates the component's selected option.\r\n  */\r\n  handleListClick(idx) {\r\n    this.setState((state) => {\r\n      return {isOpen: !state.isOpen, selected: idx};\r\n    })\r\n  }\r\n\r\n  /*\r\n    Runs each time the props or state of this component changes (typically after a click\r\n    has occurred outside the box). Displayst the main button, and possibly the dropdown\r\n    menu should the isOpen state property be true.\r\n  */\r\n  render() {\r\n    return (\r\n      <div className={\"mt-1 relative select-none \" + this.props.trigger}>\r\n        <label id=\"listbox-label\" className=\"block text-sm font-medium text-gray-700 tracking-wider select-none\">\r\n          {this.props.label}\r\n        </label>\r\n        <button onClick={() => this.toggleOpen()} type=\"button\" className=\"relative w-48 bg-white hover:bg-gray-200 border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-pointer focus:outline-none sm:text-sm\">\r\n          <span className=\"flex items-center font-medium\">\r\n            <img src={this.props.optionImages[this.state.selected]} alt=\"\" className=\"flex-shrink-0 h-6 w-6\" />\r\n            <span className=\"ml-3 block truncate select-none\">\r\n              {this.props.options[this.state.selected]+this.props.suffix}\r\n            </span>\r\n          </span>\r\n          <span className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\r\n            <svg className=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n              <path fillRule=\"evenodd\" d=\"M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n          </span>\r\n        </button>\r\n\r\n        {this.state.isOpen &&\r\n          <div className=\"z-10 absolute mt-1 w-48 rounded-md bg-white shadow-lg left-0\">\r\n            <ul tabIndex=\"-1\" role=\"listbox\" className=\"max-h-56 rounded-md text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\r\n              {this.props.options.map((item, idx) => (\r\n                <li key={idx} onClick={() => this.handleListClick(idx)} className=\"rounded-md bg-white hover:bg-gray-200 text-gray-500 hover:text-black cursor-pointer select-none relative py-2 pl-3 pr-9\">\r\n                  <div className=\"flex items-center\">\r\n                    <img src={this.props.optionImages[idx]} alt=\"\" className=\"flex-shrink-0 h-6 w-6 rounded-full\" />\r\n                    <span className=\"ml-3 block font-medium truncate\">\r\n                      {item+this.props.suffix}\r\n                    </span>\r\n                  </div>\r\n                  {this.state.selected === idx &&\r\n                    <span className=\"absolute inset-y-0 right-0 flex items-center pr-4\">\r\n                      <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                    </span>\r\n                  }\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}","import React, {Component} from \"react\";\r\n\r\n/* \r\n  A generic class used for selecting between multiple options with a dropdown menu.\r\n  Responsible for keeping track of the selected option as well as the state of whether\r\n  the dropdown portion is open or closed.\r\n*/\r\nexport default class SelectMenu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: props.defaultIdx,\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  /*\r\n    Called each time the main button of the menu is clicked, toggles the open/closed state.\r\n  */\r\n  toggleOpen() {\r\n    this.setState((state) => {\r\n      return {isOpen: !state.isOpen};\r\n    });\r\n  }\r\n\r\n  /*\r\n    Called each time one of the options in the dropdown menu portion is selected, toggles\r\n    the open/closed state and updates the component's selected option.\r\n  */\r\n  handleListClick(idx) {\r\n    this.setState((state) => {\r\n      return {isOpen: !state.isOpen, selected: idx};\r\n    });\r\n  }\r\n\r\n  /*\r\n    Runs each time the props or state of this component changes (typically after a click\r\n    has occurred outside the box). Displayst the main button, and possibly the dropdown\r\n    menu should the isOpen state property be true.\r\n  */\r\n  render() {\r\n    return (\r\n      <div className={\"testxx mt-1 relative \" + this.props.trigger}>\r\n        <label id=\"listbox-label\" className=\"block text-sm font-medium text-gray-700 tracking-wider select-none\">\r\n          {this.props.label}\r\n        </label>\r\n        <button onClick={() => this.toggleOpen()} type=\"button\" className=\"relative w-48 h-10 bg-white hover:bg-gray-200 border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-pointer focus:outline-none sm:text-sm\">\r\n          <span className=\"flex items-center font-medium\">\r\n            <span className=\"ml-3 block truncate\">\r\n              {this.props.options[this.state.selected]+this.props.suffix}\r\n            </span>\r\n          </span>\r\n          <span className=\"ml-3 absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\r\n            <svg className=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n              <path fillRule=\"evenodd\" d=\"M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n          </span>\r\n        </button>\r\n\r\n        {this.state.isOpen &&\r\n          <div className=\"z-10 absolute mt-1 w-48 bg-white rounded-md shadow-lg\">\r\n            <ul tabIndex=\"-1\" role=\"listbox\" className=\"max-h-56 rounded-md text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\r\n              {this.props.options.map((item, idx) => (\r\n                <li key={idx} onClick={() => this.handleListClick(idx)} className=\"rounded-md bg-white hover:bg-gray-200 text-gray-500 hover:text-black cursor-pointer select-none relative py-2 pl-3 pr-9\">\r\n                  <div className=\"flex items-center\">\r\n                    <span className=\"ml-3 block font-medium truncate\">\r\n                      {item+this.props.suffix}\r\n                    </span>\r\n                  </div>\r\n                  {this.state.selected === idx &&\r\n                    <span className=\"absolute inset-y-0 right-0 flex items-center pr-4\">\r\n                      <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\r\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                    </span>\r\n                  }\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}","import React, {Component} from \"react\";\r\nimport Visualizer from \"./Visualizer/Visualizer\"\r\nimport ImageSelectMenu from \"./Menus/ImageSelectMenu\"\r\nimport SelectMenu from \"./Menus/SelectMenu\"\r\n\r\n/*\r\n  The main Component taking up the entirety of the page. Stores information for the various\r\n  options, names, images, etc. as well as references to its children components.\r\n*/\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.algOptions = [\"Bubble Sort\", \"Quick Sort\", \"Merge Sort\"];\r\n    this.algOptionImages = [\"https://i.imgur.com/83vTj7A.png\", \"https://i.imgur.com/VuHhqSu.png\", \"https://i.imgur.com/LEASD31.png\"];\r\n    this.delayOptions = [10, 50, 100, 500];\r\n    this.sizeOptions = [10, 50, 100, 500];\r\n    this.algMenuRef = React.createRef();\r\n    this.sizeMenuRef = React.createRef();\r\n    this.delayMenuRef = React.createRef();\r\n    this.visRef = React.createRef();\r\n  }\r\n\r\n  /*\r\n    Runs each time the user clicks on the page. Checks if the click was on each of the option\r\n    menus and if not it closes them. Makes the user experience much smoother so that they\r\n    don't have to open and close each menu every single time.\r\n  */\r\n  closeMenusIfApplicable(e) {\r\n    if (!e.target.closest(\".algMenu\")) {\r\n      this.algMenuRef.current.setState({isOpen: false});\r\n    }\r\n    if (!e.target.closest(\".sizeMenu\")) {\r\n      this.sizeMenuRef.current.setState({isOpen: false});\r\n    }\r\n    if (!e.target.closest(\".delayMenu\")) {\r\n      this.delayMenuRef.current.setState({isOpen: false});\r\n    }\r\n  }\r\n\r\n  /*\r\n    Runs each time the user clicks on the \"Randomize\" button. Since the visualizer is responsible\r\n    for randomizing itself when needed, this simply checks the number of bars to randomize with\r\n    and lets the visualizer do the rest of the work.\r\n  */\r\n  randomizeVisualizer() {\r\n    setTimeout(() => {\r\n      const numBars = this.sizeOptions[this.sizeMenuRef.current.state.selected];\r\n      this.visRef.current.randomize(numBars);\r\n    }, 0);\r\n  }\r\n\r\n  /*\r\n    Runs each time the user clicks on the \"Simulate\" button. Since the visualizer is responsible\r\n    for animating itself, this will check the requested step time and pass it on to the\r\n    visualizer to do the rest.\r\n  */\r\n  simulateSort() {\r\n    const alg = this.algMenuRef.current.state.selected;\r\n    const delay = this.delayOptions[this.delayMenuRef.current.state.selected];\r\n\r\n    if (alg === 0) { // Bubble Sort  \r\n      this.visRef.current.animateBubbleSort(delay);\r\n    }\r\n    else if (alg === 1) { // Quick Sort\r\n      this.visRef.current.animateQuickSort(delay);\r\n    }\r\n    else if (alg === 2) { // Merge Sort\r\n      this.visRef.current.animateMergeSort(delay);\r\n    }\r\n  }\r\n\r\n  /*\r\n    Runs each time the props or state of this component changes (which is never),\r\n    so it is essentially responsible for setting up the initial look of the page,\r\n    with the following structure:\r\n\r\n    -----------------------------------------------------------------------------\r\n    |      [alg menu]  [size menu]  [delay menu]  [randomize]  [simulate]       |\r\n    -----------------------------------------------------------------------------\r\n    |                                                                           |\r\n    |                                                                           |\r\n    |                                                                           |\r\n    |                               visualizer                                  |\r\n    |                                                                           |\r\n    |                                                                           |\r\n    ----------------------------------------------------------------------------|\r\n  */\r\n  render() {\r\n      return (\r\n        <div className=\"absolute w-full h-full bg-grey-50\" onClick={(e) => this.closeMenusIfApplicable(e)}>\r\n          <div className=\"bg-blue-50 pt-8 h-1/6 shadow-md space-y-6 rounded-b-lg\">\r\n            <div className=\"flex justify-evenly self-center\">\r\n              <ImageSelectMenu ref={this.algMenuRef} label=\"Algorithm\" trigger=\"algMenu\" options={this.algOptions} suffix=\"\" optionImages={this.algOptionImages} defaultIdx={0} />\r\n              <SelectMenu ref={this.sizeMenuRef} label=\"Data Size\" trigger=\"sizeMenu\" options={this.sizeOptions} suffix=\"\" defaultIdx={0} />\r\n              <SelectMenu ref={this.delayMenuRef} label=\"Step Time\" trigger=\"delayMenu\" options={this.delayOptions} suffix=\"ms\" defaultIdx={0} />\r\n              <div className=\"mt-1\">\r\n                <label id=\"listbox-label\" className=\"block text-sm font-medium text-gray-700 tracking-wider select-none opacity-0\">\r\n                  Easter\r\n                </label>\r\n                <button onClick={() => this.randomizeVisualizer()} type=\"button\" aria-haspopup=\"listbox\" aria-expanded=\"true\" aria-labelledby=\"listbox-label\" className=\"relative w-48 h-10 bg-white hover:bg-gray-200 border border-gray-300 rounded-md shadow-sm py-2 text-left cursor-pointer focus:outline-none sm:text-sm\">\r\n                  <span className=\"relative flex justify-center items-center font-medium \">\r\n                    <span className=\"relative block truncate\">\r\n                      Randomize\r\n                    </span>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <div className=\"mt-1\">\r\n                <label id=\"listbox-label\" className=\"block text-sm font-medium text-gray-700 tracking-wider select-none opacity-0\">\r\n                  egg\r\n                </label>\r\n                <button onClick={() => this.simulateSort()} type=\"button\" aria-haspopup=\"listbox\" aria-expanded=\"true\" aria-labelledby=\"listbox-label\" className=\"relative w-48 h-10 bg-white hover:bg-gray-200 border border-gray-300 rounded-md shadow-sm py-2 text-left cursor-pointer focus:outline-none sm:text-sm\">\r\n                  <span className=\"relative flex justify-center items-center font-medium select-none\">\r\n                    <span id=\"progressBar\" className=\"absolute bg-green-100 rounded-md h-8 w-0 select-none\"></span>\r\n                    <span className=\"relative block truncate\">\r\n                      Simulate\r\n                    </span>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex h-5/6 items-end justify-center\" style={{paddingBottom: `${window.innerHeight/12}px`}}>\r\n            <Visualizer ref={this.visRef} className=\"z-0\" numBars={this.sizeOptions[0]} />\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n  }\r\n}","import React from 'react';\nimport './App.css'\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}